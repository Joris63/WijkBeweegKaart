// <auto-generated />
using System;
using Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(BackendContext))]
    [Migration("20221206105453_AllDtoModels")]
    partial class AllDtoModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.DTOModels.BuildingDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("buildingType")
                        .HasColumnType("int");

                    b.Property<int>("mapId")
                        .HasColumnType("int");

                    b.Property<float>("rotation")
                        .HasColumnType("real");

                    b.Property<int>("x")
                        .HasColumnType("int");

                    b.Property<int>("y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("mapId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.LevelDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("previousSurveyId")
                        .HasColumnType("int");

                    b.Property<int>("surveyId")
                        .HasColumnType("int");

                    b.Property<string>("surveyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.MapDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserDTOId")
                        .HasColumnType("int");

                    b.Property<double>("latitude")
                        .HasColumnType("float");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserDTOId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.ReviewDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reviewedMapId")
                        .HasColumnType("int");

                    b.Property<int>("writerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("reviewedMapId");

                    b.HasIndex("writerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.UserDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.UserLevelDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("levelId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("levelId");

                    b.HasIndex("userId");

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.BuildingDTO", b =>
                {
                    b.HasOne("Backend.Models.DTOModels.MapDTO", "map")
                        .WithMany("placedBuildings")
                        .HasForeignKey("mapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("map");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.MapDTO", b =>
                {
                    b.HasOne("Backend.Models.DTOModels.UserDTO", null)
                        .WithMany("createdMaps")
                        .HasForeignKey("UserDTOId");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.ReviewDTO", b =>
                {
                    b.HasOne("Backend.Models.DTOModels.MapDTO", "reviewedMap")
                        .WithMany()
                        .HasForeignKey("reviewedMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.DTOModels.UserDTO", "writer")
                        .WithMany("writtenReviews")
                        .HasForeignKey("writerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reviewedMap");

                    b.Navigation("writer");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.UserLevelDTO", b =>
                {
                    b.HasOne("Backend.Models.DTOModels.LevelDTO", "level")
                        .WithMany()
                        .HasForeignKey("levelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.DTOModels.UserDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("level");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.MapDTO", b =>
                {
                    b.Navigation("placedBuildings");
                });

            modelBuilder.Entity("Backend.Models.DTOModels.UserDTO", b =>
                {
                    b.Navigation("createdMaps");

                    b.Navigation("writtenReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
